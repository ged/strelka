#!/usr/bin/env ruby
# vim: set nosta noet ts=4 sw=4:

require 'strelka'
require 'trollop'
require 'highline'

# Have to do it this way to avoid the vendored 'sysexits' under OSX.
gem 'sysexits'
require 'sysexits'


# A tool for setting up and running Strelka apps
class Strelka::CLICommand
	extend ::Sysexits
	include Sysexits,
	        Strelka::Loggable,
	        Strelka::Constants

	# Make a HighLine color scheme
	COLOR_SCHEME = HighLine::ColorScheme.new do |scheme|
		scheme[:header]    = [ :bold, :yellow ]
		scheme[:subheader] = [ :bold, :white ]
		scheme[:key]       = [ :white ]
		scheme[:value]     = [ :bold, :white ]
		scheme[:error]     = [ :red ]
		scheme[:warning]   = [ :yellow ]
		scheme[:message]   = [ :reset ]
	end


	# Class instance variables
	@command_help = Hash.new {|h,k| h[k] = { :desc => nil, :usage => ''} }
	@prompt = @option_parser = nil


	### Run the utility with the given +args+.
	def self::run( args )
		HighLine.color_scheme = COLOR_SCHEME

		oparser = self.make_option_parser
		opts = Trollop.with_standard_exception_handling( oparser ) do
			oparser.parse( args )
		end

		command = oparser.leftovers.shift
		self.new( opts ).run( command, *oparser.leftovers )
		exit :ok

	rescue => err
		Strelka.logger.fatal "Oops: %s: %s" % [ err.class.name, err.message ]
		Strelka.logger.debug { '  ' + err.backtrace.join("\n  ") }

		exit :software_error
	end


	### Return a String that describes the available commands, e.g., for the 'help'
	### command.
	def self::make_command_table
		commands = self.available_commands

		# Build the command table
		col1len = commands.map( &:length ).max
		return commands.collect do |cmd|
			helptext = self.help( cmd.to_sym ) or next # no help == invisible command
			"%s  %s" % [
				self.prompt.color(cmd.rjust(col1len), :key),
				self.prompt.color(helptext, :value)
			]
		end.compact
	end


	### Return an Array of the available commands.
	def self::available_commands
		return self.public_instance_methods( false ).
			map( &:to_s ).
			grep( /_command$/ ).
			map {|methodname| methodname.sub(/_command$/, '') }.
			sort
	end


	### Create and configure a command-line option parser for the command.
	### Returns a Trollop::Parser.
	def self::make_option_parser
		unless @option_parser
			progname = File.basename( $0 )

			# Make a list of the log level names and the available commands
			loglevels = Strelka::Logging::LOG_LEVELS.
				sort_by {|name,lvl| lvl }.
				collect {|name,lvl| name.to_s }.
				join( ', ' )
			command_table = self.make_command_table

			@option_parser = Trollop::Parser.new do
				banner "Manage Strelka apps"

				text ''
				command_table.each {|line| text(line) }
				text ''

				text 'Global Options'
				opt :config, "Specify the config file to load.", :type => :string
				opt :datadir, "Override the Strelka data directory.", :type => :string,
					:short => :D
				text ''

				text 'Other Options:'
				opt :debug, "Turn debugging on. Also sets the --loglevel to 'debug'."
				opt :loglevel, "Set the logging level. Must be one of: #{loglevels}",
					:default => Strelka::Logging::LOG_LEVEL_NAMES[ Strelka.logger.level ]
			end
		end

		return @option_parser
	end


	### Add a help string for the given +command+.
	def self::help( command, helpstring=nil )
		if helpstring
			@command_help[ command.to_sym ][:desc] = helpstring
		end

		return @command_help[ command.to_sym ][:desc]
	end


	### Add/fetch the +usagestring+ for +command+.
	def self::usage( command, usagestring=nil )
		if usagestring
			prefix = usagestring[ /\A(\s+)/, 1 ]
			usagestring.gsub!( /^#{prefix}/m, '' ) if prefix

			@command_help[ command.to_sym ][:usage] = usagestring
		end

		return @command_help[ command.to_sym ][:usage]
	end


	### Return the global Highline prompt object, creating it if necessary.
	def self::prompt
		unless @prompt
			@prompt = HighLine.new

			columns = @prompt.output_cols.nonzero? || 80
			rows    = @prompt.output_rows.nonzero? || 1000

			@prompt.page_at = rows - 5
			@prompt.wrap_at = columns - 2
		end

		return @prompt
	end


	#################################################################
	###	I N S T A N C E   M E T H O D S
	#################################################################

	### Create a new instance of the command and set it up with the given
	### +options+.
	def initialize( options )
		Strelka.logger.formatter = Strelka::Logging::ColorFormatter.new( Strelka.logger ) if $stderr.tty?
		@options = options

		if @options.debug
			$DEBUG = true
			$VERBOSE = true
			Strelka.logger.level = Logger::DEBUG
		elsif @options.loglevel
			Strelka.logger.level = Strelka::Logging::LOG_LEVELS[ @options.loglevel ]
		end

	end


	######
	public
	######

	# The Trollop options hash the command will read its configuration from
	attr_reader :options


	# Delegate the instance #prompt method to the class method instead
	define_method( :prompt, &self.method(:prompt) )


	### Run the command with the specified +command+ and +args+.
	def run( command, *args )
		command ||= 'shell'
		cmd_method = nil

		# Set the datadir override if it's given
		if self.options.datadir
			self.log.debug "Using data dir option: %s" % [ self.options.datadir ]
			Strelka.datadir = Pathname( self.options.datadir )
		elsif File.directory?( 'data' ) && subdir = Dir[ 'data/*' ].first
			self.log.debug "Using local data dir: %s" % [ subdir ]
			Strelka.datadir = subdir
		end

		# Include a 'lib' directory if there is one
		$LOAD_PATH.unshift( 'lib' ) if File.directory?( 'lib' )

		# Run the command
		begin
			cmd_method = self.method( "#{command}_command" )
		rescue NameError => err
			error "No such command %p" % [ command ]
			exit :usage
		end

		cmd_method.call( *args )
	end


	#
	# Commands
	#

	### The 'help' command
	def help_command( *args )

		# Subcommand help
		if !args.empty?
			command = args.shift

			if self.class.available_commands.include?( command )
				header( self.class.help(command) )
				desc = "\n" + 'Usage: ' + command + ' ' + self.class.usage(command) + "\n"
				message( desc )
			else
				error "No such command %p" % [ command ]
			end

		# Help by itself show the table of available commands
		else
			command_table = self.class.make_command_table
			header "Available Commands"
			message( *command_table )
		end

	end
	help :help, "Show help for a single COMMAND if given, or list available commands if not"
	usage :help, "[COMMAND]"


	### The 'discover' command
	def discover_command( *args )
		header "Searching for Strelka applications..."

		paths = Strelka::App.discover_paths
		if paths.empty?
			message "None found."
		else
			paths.each do |gemname, paths|
				message "\n"

				if gemname == ''
					subheader "Local: "
				else
					subheader "Gem: #{gemname}"
				end

				filenames = paths.map {|path| path.basename.to_s }
				list( filenames )
			end
		end
	end
	help :discover, "Show available Strelka applications installed as gems."


	### The 'setup' command
	def setup_command( *args )
	end
	help :setup, "Set up a new Strelka environment and start the admin server."


	### The 'start' command
	def start_command( *args )
		path, appname, gemname = self.find_specified_app( *args )

		header "Starting the %s app%s" % [
			appname,
			gemname == '' ? '' : " the #{gemname} gem"
		]
		fork do
			self.log.debug "  in the child."
			Strelka.load_config( self.options.config ) if self.options.config
			Kernel.load( path )
		end

		message "started. Waiting for shutdown."
		Process.wait
	end
	help :start, "Start a Strelka app"


	### The 'version' command
	def version_command( *args )
		message( "<%= color 'Version:', :header %> " + Mongrel2.version_string(true) )
	end
	help :version, "Prints the Ruby-Mongrel2 version."


	#
	# Helper methods
	#

	### Find the app specified in the specified +args+ and return the Pathname to it and the
	### name of the gem it belongs to. Raises a RuntimeError if the +args+ didn't contain a
	### valid application specification.
	def find_specified_app( *args )
		appname = args.pop
		gemname = args.pop
		discovered_apps = Strelka::App.discover_paths

		path = nil
		if gemname
			discovered_apps[ gemname ].each do |apppath|
				self.log.debug "    %s (%s)" % [ apppath, apppath.basename('.rb') ]
				if apppath.basename('.rb').to_s == appname
					path = apppath
					break
				end
			end
		else
			self.log.debug "No gem name; searching them all:"
			discovered_apps.each do |disc_gemname, paths|
				self.log.debug "  %s: %d paths" % [ disc_gemname, paths.length ]
				path = paths.find do |apppath|
					self.log.debug "    %s (%s)" % [ apppath, apppath.basename('.rb') ]
					self.log.debug "    %p vs. %p" % [ apppath.basename('.rb').to_s, appname ]
					apppath.basename('.rb').to_s == appname
				end or next
				gemname = disc_gemname
				break
			end
		end

		unless path
			msg = "Couldn't find an app named '#{appname}'"
			msg << " in the #{gemname} gem" if gemname
			raise( msg )
		end
		self.log.debug "  found: %s" % [ path ]

		return path, appname, gemname
	end


	#
	# Utility methods
	#

	### Output normal output
	def message( *parts )
		self.prompt.say( parts.map(&:to_s).join($/) )
	end


	### Output the given +text+ highlighted as a header.
	def header( text )
		message( self.prompt.color(text, :header) )
	end


	### Output the given +text+ highlighted as a subheader.
	def subheader( text )
		message( self.prompt.color(text, :subheader) )
	end


	### Output the given +text+ highlighted as an error.
	def error( text )
		message( self.prompt.color(text, :error) )
	end


	### Output the given +items+ as a columnar list.
	def list( *items )
		message( self.prompt.list(items.flatten.compact.map(&:to_s), :columns_down) )
	end

end # class Strelka::CLICommand


Strelka::CLICommand.run( ARGV.dup )

