= Strelka

* http://deveiate.org/projects/Strelka

== Description

Strelka is a framework for creating and deploying Mongrel2 web applications
in Ruby, and for managing a Mongrel2 cluster.

It's named after the Russian dog who was one of the first space travelers
to orbit the Earth and return alive.


== Prerequisites

* Mongrel2[http://mongrel2.org/]
* Ruby 1.9.2 or better


== Installation

    $ gem install strelka


== Usage

Strelka has two major parts: a runtime environment that you can use to set
up a Mongrel2 cluster, and an application framework for developing Mongrel2
applications.


=== The Runtime Environment

The Strelka runtime environment provides a convenient way to set up a Mongrel2
server, configure it, install Ruby applications that talk to it, and then
replicate that configuration and application setup over multiple front-end and
back-end servers (if you want).

You aren't required to use it, of course, but the documentation may assume
that you are at some points.

If you'd rather just use the application-framework part by itself, skip on
down to the 'Application Framework' section.

=== Leash

Strelka comes with a command-line tool called 'leash' that you can use to
interact with the Strelka runtime environment.

To set up a new server, make a directory for the server to run in, change into
it, then run 'leash setup':

	$ mkdir strelka
	$ cd strelka
	$ leash setup
	Loading config from [...]/strelka-0.0.1pre9/data/strelka/bootstrap-config.rb
	W, [2011-09-27T17:06:20.093620 #26013]  WARN -- : Installing config schema.
	Setting up chroot environment...
	  copying static assets...
	  creating directories...
	Starting mongrel2...
	Starting up control app...
	Okay, point a browser at http://localhost:7337/

This will start mongrel2 and the Strelka admin application, and from there,
you can use a browser for mostly everything else.


=== The Application Framework

The application framework is primarily geared towards developing web (HTTP)
applications at the moment, but the intention is to make Strelka useful for
developing applications that use the other protocols supported by Mongrel2
at some point as well.

The framework is centered around the Strelka::App class, which is what you'll
subclass when creating your own applications. It's pretty minimal by itself;
Strelka applications are composed out of plugins that mix in the specific
framework parts you specify, so you get exactly what you need and nothing
more.

The plugins system itself is contained in the Strelka::App::Plugins mixin,
which is included in Strelka::App already. This adds the +plugins+
declarative, which you use from your app to load the plugins you want to use.

A very basic application might look like this:

    #!/usr/bin/env ruby

    require 'strelka'

    # The Strelka admin web console.
    class HelloWorldApp < Strelka::App

        # The route appid that will configure this app's
        # connection to Mongrel2 if no appid is given
        # to App.run
        ID = 'hello-world'

        # Use Sinatra-like routing
        plugins :routing

        # Set responses to plaintext if they don't specify differently
        default_type 'text/plain'

        # Handle all GET requests the same way
        get do |req|
            res = req.response
            res.status = HTTP::OK
            res << 'Hello, world!'
            return res
        end

    end # class HelloWorldApp


    # Run the app
    HelloWorldApp.run if __FILE__ == $0

This app uses the 'routing' plugin, which adds Sinatra-like hooks for matching
callbacks to requests. The example app above responds only to 'GET' requests,
and ignores the path of the request altogether.

Strelka comes with a few default plugins, but you can define your own fairly
easily.


=== Default Plugins

[routing[rdoc-ref:Strelka::App::Routing]]
    Sinatra-ish request routing.
[parameters[rdoc-ref:Strelka::App::Parameters]]
    Query and URI path-parameter validation and untainting.
[filters[rdoc-ref:Strelka::App::Filters]]
    Request/response filters, for doing things like compression, content-type
    negotiation, or other things that somehow modify every request or response.
[templating[rdoc-ref:Strelka::App::Templating]]
    Templating via the Inversion template engine.
[errors[rdoc-ref:Strelka::App::Errors]]
    Custom error-handling.
[restresources[rdoc-ref:Strelka::App::RestResources]]
    Automatically set up RESTful service resources for Sequel::Model-derived
	classes.

== Contributing

You can check out the current development source with Mercurial via its
{project page}[http://repo.deveiate.org/Strelka]. Or if you prefer Git, via 
{its Github mirror}[https://github.com/ged/strelka].

After checking out the source, run:

    $ rake newb

This task will install any missing dependencies, run the tests/specs,
and generate the API documentation.


== License

Copyright (c) 2011-2012, Michael Granger
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the author/s, nor the names of the project's
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

